#!/usr/bin/env bash

##############################################################################
##
##  crawler start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/.." >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="crawler"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and CRAWLER_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx2g"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn ( ) {
    echo "$*"
}

die ( ) {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/lib/crawler-1.3.4.jar:$APP_HOME/lib/retry-manager-0.1.13.jar:$APP_HOME/lib/scala-xml_2.11-1.0.5.jar:$APP_HOME/lib/json4j-apache-20150218.jar:$APP_HOME/lib/monix-eval_2.11-2.0.0.jar:$APP_HOME/lib/ficus_2.11-1.2.3.jar:$APP_HOME/lib/scopt_2.11-3.4.0.jar:$APP_HOME/lib/vcrypt-java-4.2.4.jar:$APP_HOME/lib/log4s_2.11-1.2.1.jar:$APP_HOME/lib/slf4j-log4j12-1.7.12.jar:$APP_HOME/lib/scaposer_2.11-1.9.jar:$APP_HOME/lib/httpclient-4.5.jar:$APP_HOME/lib/httpcore-4.4.1.jar:$APP_HOME/lib/httpmime-4.5.jar:$APP_HOME/lib/commons-io-2.4.jar:$APP_HOME/lib/h2-1.4.192.jar:$APP_HOME/lib/monix-types_2.11-2.0.0.jar:$APP_HOME/lib/monix-execution_2.11-2.0.0.jar:$APP_HOME/lib/config-1.3.0.jar:$APP_HOME/lib/slf4j-api-1.7.12.jar:$APP_HOME/lib/log4j-1.2.17.jar:$APP_HOME/lib/scala-parser-combinators_2.11-1.0.4.jar:$APP_HOME/lib/commons-logging-1.2.jar:$APP_HOME/lib/commons-codec-1.9.jar:$APP_HOME/lib/reactive-streams-1.0.0.jar:$APP_HOME/lib/scala-library-2.11.8.jar

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation, or install Java if it is not installed."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=$((i+1))
    done
    case $i in
        (0) set -- ;;
        (1) set -- "$args0" ;;
        (2) set -- "$args0" "$args1" ;;
        (3) set -- "$args0" "$args1" "$args2" ;;
        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
for s in "${@}" ; do
    s="\""$s"\""
    APP_ARGS=$APP_ARGS" "$s
done

# Collect JVM options
JVM_OPTS=$DEFAULT_JVM_OPTS" "$JAVA_OPTS" "$CRAWLER_OPTS

# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
  cd "$(dirname "$0")"
fi

eval "$JAVACMD" "$JVM_OPTS" -classpath "\"$CLASSPATH\"" com.ibm.watson.crawler.common.RunCrawl "$APP_ARGS"

JAVA_EXIT=$?
if [ ${JAVA_EXIT} -gt 0 ]; then
  echo "Checking Java version since ${APP_NAME} exited irregularly..."
	SOURCE="${BASH_SOURCE[0]}"
	while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
			 DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
			 SOURCE="$(readlink "$SOURCE")"
			 [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
	done

	SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

  DETECTED_JAVA_VERSION="$(${SCRIPT_DIR}/__get-java-property)"
	split=( ${DETECTED_JAVA_VERSION//./ } )
	major=${split[0]}
	minor=${split[1]}
  patch_build=${split[2]}
  split_patch_build=( ${patch_build//_/ } )
  patch=${split_patch_build[0]}
  build=${split_patch_build[1]}

  declare -i MIN_MAJOR
  declare -i MIN_MINOR
  declare -i next_min_major
  MIN_MAJOR=1
  MIN_MINOR=8
  next_min_major=MIN_MAJOR+1
  MESSAGE_OK_CHECK_LOGS="Your Java version is ${DETECTED_JAVA_VERSION}, which Crawler supports. Inspect logging output for errors."
  MESSAGE_JAVA_TOO_OLD="Your version of Java is too old. You must be using Java ${MIN_MAJOR}.${MIN_MINOR} or greater."

  if [ $major -lt $next_min_major ]; then
    if [ $minor -lt $MIN_MINOR ]; then
      echo ${MESSAGE_JAVA_TOO_OLD}
    else
      echo ${MESSAGE_OK_CHECK_LOGS}
    fi
  else
    echo ${MESSAGE_OK_CHECK_LOGS}
  fi

fi

exit ${JAVA_EXIT}
